snippet pudbr_orig "pudb.remote set_traceback" b
from pudb.remote import set_trace; set_trace(term_size=(319, 73), host="0.0.0.0", port=6900)  # noqa
endsnippet

# `v! echo "`echo &columns`, `echo &lines`

# this should work with dynamic terminal size
snippet pudbr "pudb.remote set_traceback" b
`!v "from pudb.remote import set_trace; set_trace(term_size=(".&columns.",".&lines."), host='0.0.0.0', port=6900)  # noqa"`
endsnippet

snippet pudbr_from_bash "pudb.remote set_traceback" b
`#!/bin/bash
myvar=$(osascript -e "tell application \"Safari\"" -e "activate" -e "set myvar to URL of current tab of front window" -e "return myvar" -e "end tell")
port=6900
width=$(tput cols)
height=$(tput lines)
txt="from pudb.remote import set_trace; set_trace(term_size=($width, $height), host="0.0.0.0", port=$port)  # noqa"
echo $txt`
endsnippet

snippet pudbrr "pudb.remote set_traceback" b
from pudb.remote import set_trace; set_trace(term_size=(319, 66), host="0.0.0.0", port=6900)  # noqa
endsnippet

snippet pudbrv "pudb.remote set_traceback vertical half" b
__import__('pudb').remote.set_trace(term_size=(150, 73), host="0.0.0.0", port=6900)
endsnippet

snippet argparse_example "argparser example" b
import argparse

parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument(
	'integers', metavar='N', type=int, nargs='+',
	help='an integer for the accumulator'
)
parser.add_argument(
	'--sum', dest='accumulate', action='store_const',
	const=sum, default=max,
	help='sum the integers (default: find the max)'
)

args = parser.parse_args()
print(args.accumulate(args.integers))
endsnippet
